{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 2\n};\nconst _hoisted_4 = {\n  class: \"font-weight-bold\"\n};\nconst _hoisted_5 = {\n  class: \"font-weight-bold\"\n};\nconst _hoisted_6 = {\n  key: 3,\n  class: \"font-weight-bold\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [$options.displayImg() ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $props.imgData,\n    style: {\n      \"max-width\": \"100%\"\n    }\n  }, null, 8\n  /* PROPS */\n  , _hoisted_1)) : (_openBlock(), _createElementBlock(\"img\", _hoisted_2)), _ctx.responseData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, \" Prediction: \" + _toDisplayString($props.resData.predictedTagName), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", _hoisted_5, \" Probability: \" + _toDisplayString(($props.resData.prediction[0].probability * 100).toFixed(3)) + \" % \", 1\n  /* TEXT */\n  )])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \" Please Upload an Image \"))]);\n}","map":{"version":3,"mappings":";;;;;;;;;AAKaA,OAAK,EAAC;;;AAGNA,OAAK,EAAC;;;;AAICA,OAAK,EAAC;;;uBAXtBC,oBAcM,KAdN,EAcM,IAdN,EAcM,CAbwBC,uCAA1BD,oBAAmE,KAAnE,EAAmE;UAAA;AAA7DE,OAAG,EAAEC,cAAwD;AAA3BC,SAAwB,EAAxB;AAAA;AAAA;AAA2B,GAAnE;;AAAA,kCACAJ,oBAAa,KAAb,EAAaK,UAAb,EAYE,EAXSC,mCAAXN,oBAOM,KAPN,EAOMO,UAPN,EAOM,CANNC,oBAEM,KAFN,cAA8B,kBACdC,iBAAGN,eAAQO,gBAAX,CADhB,EAC2C;AAAA;AAD3C,GAMM,EAHNF,oBAEM,KAFN,cAA8B,mBACbC,kBAAIN,eAAQQ,UAAR,CAAkB,CAAlB,EAAsBC,WAAtB,GAAiC,GAArC,EAA6CC,OAA7C,CAAoD,CAApD,EADa,GAC4C,KAD1E,EAEA;AAAA;AAFA,GAGM,CAPN,oBAQAb,oBAEM,KAFN,cAAqC,0BAArC,EAGE,CAdN","names":["class","_createElementBlock","$options","src","$props","style","_hoisted_2","_ctx","_hoisted_3","_createElementVNode","_toDisplayString","predictedTagName","prediction","probability","toFixed"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\AIOT_Aquatic_Capstone\\vuefrontend\\src\\components\\Results.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <img :src=\"imgData\" v-if=\"displayImg()\" style=\"max-width: 100%;\" />\r\n        <img v-else/>\r\n        <div v-if=\"responseData\">\r\n        <div class=\"font-weight-bold\">\r\n            Prediction: {{ resData.predictedTagName}}\r\n        </div>\r\n        <div class=\"font-weight-bold\"> \r\n            Probability: {{ (resData.prediction[0].probability * 100).toFixed(3)}} %\r\n        </div>\r\n        </div>\r\n        <div v-else class=\"font-weight-bold\">\r\n            Please Upload an Image\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default({\r\n    name: 'Results',\r\n    props: {\r\n        imgData: null,\r\n        resData: String\r\n    },\r\n    data () {\r\n        return {\r\n            selectedImage: null\r\n        }\r\n    },\r\n    computed: {\r\n        displayImg() {\r\n            console.log(typeof selectedImage)\r\n            this.imgData = new Image()\r\n            var reader = new FileReader()\r\n\r\n            //when the reader is loaded, the imgFile is assigned the reading/event result(image is read onto the web page)\r\n            reader.onload = (e) => {\r\n                this.imgData = e.target.result\r\n            }\r\n\r\n            //Read the uploaded file form the input as URL using the reader.\r\n            reader.readAsDataURL(this.selectedImage) //console log return this as undefined\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}