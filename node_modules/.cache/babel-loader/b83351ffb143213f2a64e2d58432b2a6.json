{"ast":null,"code":"import * as d3 from \"d3\";\nimport * as d3Collection from 'd3-collection';\nexport default {\n  name: \"coralGlobe\",\n  props: {\n    msg: String\n  },\n\n  data() {\n    return {\n      title_msg: \"Global Coral Bleaching Data Visualization\",\n      svg_height: 1000,\n      svg_width: 1500,\n      paths: [],\n      points: [],\n      hovered: null,\n      pointerHover: null,\n      pointDblClick: null,\n      showBleachInfo: false\n    };\n  },\n\n  created() {\n    this.fetchAndCreate();\n  },\n\n  methods: {\n    //Fetch and manipulate data for Map creation\n    async fetchAndCreate() {\n      Promise.all([d3.json(\"./CoralBleaching.json\"), d3.json(\"./world.geojson\")]).then(([coralData, mapData]) => {\n        let topoMapData = mapData.features;\n        let projection = d3.geoMercator().fitSize([this.svg_width, this.svg_height], mapData);\n        var geopath = d3.geoPath().projection(projection); //Create paths to draw the map\n\n        this.paths = topoMapData.map(feature => {\n          //Map and projection\n          return {\n            id: feature.id,\n            name: feature.properties.name,\n            path: geopath(feature)\n          };\n        }); //Filter data for visualisation\n\n        coralData.forEach(feature => {\n          //Collect the points for the visualization (Javascript has latitude and longitude in opposite ways)\n          let pointProjection = projection([feature.lon, feature.lat]);\n\n          if (isNaN(pointProjection[0]) != true && isNaN(pointProjection[1]) != true) {\n            this.points.push({\n              id: feature.id,\n              severity: feature.bleaching_severity.toLowerCase(),\n              x: pointProjection[0],\n              y: pointProjection[1],\n              lat: feature.lat,\n              lon: feature.lon,\n              country: feature.country,\n              location: feature.location,\n              date: this.toMonthName(feature.month) + \" \" + feature.year,\n              coralFamily: feature.coral_family,\n              coralSpecies: feature.coral_species,\n              mortality: feature.mortality,\n              recovery: feature.recovery,\n              survey_type: feature.survey_type,\n              water_temp: feature.water_temperature,\n              remarks: feature.remarks,\n              source: feature.source\n            });\n          } else {\n            console.log(feature);\n          }\n        });\n      });\n    },\n\n    //Convert digits to month strings\n    toMonthName(num) {\n      const date = new Date();\n      date.setMonth(num - 1);\n      return date.toLocaleString('en-US', {\n        month: 'long'\n      });\n    },\n\n    //Mouseover for the map\n    mouseOverHover(event) {\n      const currentData = this.hovered; //Add in the x and y coordinates for current data\n\n      this.hovered = {\n        x: event.x,\n        y: event.y,\n        data: currentData\n      };\n    },\n\n    //Return appropriate color based on bleaching severity\n    pointerColor(severity) {\n      let colorScale = d3.scaleOrdinal().domain([\"severity unknown\", \"no bleaching\", \"low\", \"medium\", \"high\"]).range([\"lightgray\", \"green\", \"yellow\", \"orange\", \"red\"]);\n      return colorScale(severity);\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","d3Collection","name","props","msg","String","data","title_msg","svg_height","svg_width","paths","points","hovered","pointerHover","pointDblClick","showBleachInfo","created","fetchAndCreate","methods","Promise","all","json","then","coralData","mapData","topoMapData","features","projection","geoMercator","fitSize","geopath","geoPath","map","feature","id","properties","path","forEach","pointProjection","lon","lat","isNaN","push","severity","bleaching_severity","toLowerCase","x","y","country","location","date","toMonthName","month","year","coralFamily","coral_family","coralSpecies","coral_species","mortality","recovery","survey_type","water_temp","water_temperature","remarks","source","console","log","num","Date","setMonth","toLocaleString","mouseOverHover","event","currentData","pointerColor","colorScale","scaleOrdinal","domain","range"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\AIOT_Aquatic_Capstone\\vuefrontend\\src\\components\\CreateGlobe.vue"],"sourcesContent":["<template>\r\n  <div width=\"100%\" height=\"100%\">\r\n    <h1>{{msg}}</h1>\r\n    <h2> {{title_msg}}</h2>\r\n\r\n    <svg id=\"globe\" :width=\"svg_width\" :height=\"svg_height\" fill=\"url(#oceanGradient)\">\r\n      <defs>\r\n          <linearGradient id = \"oceanGradient\" x1 = \"0%\" y1 =\"0%\" x2=\"100%\" y2=\"0%\">\r\n              <stop offset=\"0%\" style=\"stop-color:rgb(0,0,27); stop-opacity:1\"/>\r\n              <stop offset=\"100%\" style=\"stop-color:rgb(51,122,183); stop-opacity:1\"/>\r\n          </linearGradient>\r\n      </defs>\r\n      <g>\r\n        <path v-for=\"(data, index) in paths\" :key=\"index\" :d=\"data.path\" :id='data.id' stroke=\"#fff\" fill=\"url(#oceanGradient)\" stroke-width=\"1.0\" \r\n            @mouseenter=\"(event) => {hovered = data; mouseOverHover(event);}\"  \r\n            @mouseleave=\"() => {hovered = null;}\"/>\r\n        \r\n        <circle v-for=\"(item, index) in points\" :key=\"index\" r=\"7\" :cx=\"item.x\" :cy=\"item.y\" :fill=\"pointerColor(item.severity)\" stroke=\"black\"\r\n          @mouseenter=\"() => {pointerHover = item;}\"\r\n          @mouseleave=\"() => {pointerHover = null;}\"\r\n          @dblclick=\"() => {showBleachInfo = true; pointDblClick = item; }\"/>\r\n      </g>\r\n    </svg>\r\n    <!--Hover for the countries-->\r\n    <div v-if=\"hovered\" class=\"hovered\" \r\n      :style = '{\r\n        top: `${hovered.y + 20}px`, //x-axis for drawing\r\n        left: `${hovered.x}px`, //y-axis for drawing\r\n      }'>\r\n        <strong>Name:</strong> {{hovered.data.name}} <br />\r\n    </div>\r\n    <!--Hover for the bleaching points-->\r\n    <div id=\"pointHover\" v-if=\"pointerHover\" class=\"hovered\"\r\n    :style = '{\r\n        top: `${pointerHover.y + 20}px`,\r\n        left: `${pointerHover.x}px`,\r\n      }'>\r\n        <strong>Country:</strong> {{pointerHover.country}} <br />\r\n        <strong>Location:</strong> {{pointerHover.location}} <br />\r\n        <strong>Bleaching Severity:</strong> {{pointerHover.severity}} <br />\r\n\r\n        <div style=\"text-align:right;\">\r\n          <small>double click for info</small>\r\n        </div>\r\n    </div>\r\n    <!--Show bleaching info section on double click and double click on info section to close-->\r\n    <div v-if=\"pointDblClick\" v-show=\"showBleachInfo\" class=\"circleDblClick\"\r\n    @dblclick=\"showBleachInfo = false\"\r\n    :style ='{\r\n      top: `20%`,\r\n      left: `80%`,\r\n      height: `100%`\r\n    }'>\r\n      <!-- aligning for scrolls in case of overflow -->\r\n      <div :style=\"{\r\n        'text-align': `left`,\r\n        margin: `10px`,\r\n        height: `${this.svg_height-150}px`,\r\n        'overflow-x': `auto`,\r\n        'overflow-y': `auto`,\r\n        display: `block`\r\n      }\">\r\n          <!--Header for information section-->\r\n          <strong style=\"font-size: 30px;\">Information</strong> <br/> \r\n          <small>Date: {{this.pointDblClick.date}} </small> <br/>\r\n          <!--Information Section-->\r\n          <table style=\"width:100%;\">\r\n            <tr><td><strong>Bleaching Severity: </strong></td> \r\n                <td>{{this.pointDblClick.severity}} \r\n                    <div class=\"square\" :style=\"{'background-color': pointerColor(this.pointDblClick.severity)}\"></div>\r\n                </td>\r\n            </tr>\r\n            <tr><td><strong>Country: </strong></td> <td>{{this.pointDblClick.country}}</td></tr>\r\n            <tr><td><strong>Location: </strong></td> <td>{{this.pointDblClick.location}}</td></tr>\r\n            <tr><td><strong>Coordinates: </strong></td> <td>{{this.pointDblClick.lat}}, {{this.pointDblClick.lon}}</td></tr>\r\n            <tr><td><strong>Mortality: </strong></td> <td>{{this.pointDblClick.mortality}}</td></tr>\r\n            <tr><td><strong>Recovery: </strong></td> <td>{{this.pointDblClick.recovery}}</td></tr>\r\n            <tr><td><strong>Coral Family: </strong></td> <td>{{this.pointDblClick.coralFamily}}</td></tr>\r\n            <tr><td><strong>Coral Species: </strong></td> <td>{{this.pointDblClick.coralSpecies}}</td></tr>\r\n            <tr><td><strong>Survey Type: </strong></td> <td>{{this.pointDblClick.survey_type}}</td></tr>\r\n            <tr><td><strong>Water Temperature: </strong></td> <td>{{this.pointDblClick.water_temp}}</td></tr>\r\n            <tr><td><strong>Remarks: </strong></td> <td>{{this.pointDblClick.remarks}}</td></tr>\r\n          </table>\r\n          <div style=\"text-align: right; margin: 20px;\">\r\n            <small>Source:  {{this.pointDblClick.source}} </small><br/>\r\n          </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from \"d3\";\r\nimport * as d3Collection from 'd3-collection';\r\n\r\nexport default ({\r\n  name: \"coralGlobe\",\r\n  props: {\r\n    msg: String,\r\n  },\r\n  data() {\r\n    return {\r\n        title_msg: \"Global Coral Bleaching Data Visualization\",\r\n        svg_height: 1000,\r\n        svg_width: 1500,\r\n        paths: [],\r\n        points: [],\r\n        hovered: null,\r\n        pointerHover: null,\r\n        pointDblClick: null,\r\n        showBleachInfo:false\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchAndCreate();\r\n  },\r\n  methods: {\r\n    //Fetch and manipulate data for Map creation\r\n    async fetchAndCreate() {\r\n        Promise.all([d3.json(\"./CoralBleaching.json\"), d3.json(\"./world.geojson\")]).then(([coralData, mapData]) => {\r\n            let topoMapData = mapData.features;\r\n\r\n            let projection = d3.geoMercator().fitSize([this.svg_width, this.svg_height], mapData);\r\n            var geopath = d3.geoPath().projection(projection);\r\n\r\n\r\n            //Create paths to draw the map\r\n            this.paths = topoMapData.map(feature => {\r\n                //Map and projection\r\n                return {\r\n                  id: feature.id,\r\n                  name: feature.properties.name,\r\n                  path: geopath(feature)\r\n                }\r\n            })\r\n            \r\n            //Filter data for visualisation\r\n            coralData.forEach(feature => {\r\n              //Collect the points for the visualization (Javascript has latitude and longitude in opposite ways)\r\n              let pointProjection = projection([feature.lon, feature.lat]);\r\n              if (isNaN(pointProjection[0]) != true && isNaN(pointProjection[1]) != true) {\r\n                this.points.push(\r\n                  {\r\n                    id: feature.id,\r\n                    severity: feature.bleaching_severity.toLowerCase(),\r\n                    x: pointProjection[0],\r\n                    y: pointProjection[1],\r\n                    lat: feature.lat,\r\n                    lon: feature.lon,\r\n                    country: feature.country,\r\n                    location: feature.location,\r\n                    date: this.toMonthName(feature.month) + \" \" + feature.year,\r\n                    coralFamily: feature.coral_family,\r\n                    coralSpecies:feature.coral_species,\r\n                    mortality: feature.mortality,\r\n                    recovery: feature.recovery,\r\n                    survey_type: feature.survey_type,\r\n                    water_temp: feature.water_temperature,\r\n                    remarks: feature.remarks,\r\n                    source: feature.source\r\n                  }\r\n                )\r\n              }\r\n              else {\r\n                console.log(feature);\r\n              } \r\n            })\r\n        })\r\n\r\n    },\r\n    //Convert digits to month strings\r\n    toMonthName(num){\r\n      const date = new Date();\r\n      date.setMonth(num - 1);\r\n      return date.toLocaleString('en-US', {\r\n        month: 'long',\r\n      });\r\n    },\r\n    //Mouseover for the map\r\n    mouseOverHover(event) {\r\n      const currentData = this.hovered;\r\n      //Add in the x and y coordinates for current data\r\n      this.hovered = {\r\n        x: event.x,\r\n        y: event.y,\r\n        data: currentData\r\n      }\r\n    },\r\n    //Return appropriate color based on bleaching severity\r\n    pointerColor(severity) {\r\n      let colorScale = d3.scaleOrdinal()\r\n                        .domain([\"severity unknown\",\"no bleaching\",\"low\",\"medium\", \"high\"])\r\n                        .range([\"lightgray\", \"green\", \"yellow\", \"orange\", \"red\" ])\r\n      \r\n      return colorScale(severity);\r\n    },\r\n  },\r\n})\r\n\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.hovered {\r\n  position: absolute;\r\n  padding: 5px 10px;\r\n  background-color: #fff;\r\n  box-shadow: 0 0 5px #cfcfcf;\r\n  transform: translate(-50%);\r\n  pointer-events: none;\r\n  line-height: 1.6;\r\n  width: 240px;\r\n}\r\n\r\n.circleDblClick {\r\n  position: absolute;\r\n  padding: 5px 10px;\r\n  background-color: #fff;\r\n  box-shadow: 0 0 5px #cfcfcf;\r\n  float:right;\r\n  line-height: 1.6;\r\n  width: 30%;\r\n}\r\n\r\npath:hover {\r\n  stroke-width: 2px;\r\n  fill: rgb(214, 214, 214);\r\n}\r\n\r\ncircle:hover {\r\n  stroke-width: 4px;\r\n  fill: rgb(99, 62, 200);\r\n}\r\n\r\n#pointHover {\r\n  text-align: left;\r\n}\r\n.square {\r\n  height: 50px;\r\n  width: 50px;\r\n  outline: 1px solid black;\r\n}\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}