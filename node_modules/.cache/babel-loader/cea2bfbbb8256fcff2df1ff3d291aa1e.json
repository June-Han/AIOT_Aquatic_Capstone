{"ast":null,"code":"//Axios to allow ajax requests inside the script\n//import axios from 'axios';\nimport Results from '@/components/Results.vue';\nexport default {\n  name: 'UploadImg',\n  components: {\n    Results\n  },\n  props: {\n    msg: String\n  },\n\n  data() {\n    return {\n      selectedFile: null,\n      imgFile: null,\n      responseData: null,\n      predictProbability: 0\n    };\n  },\n\n  methods: {\n    onFileSelected(event) {\n      console.log(event);\n      this.selectedFile = event.target.files[0];\n    },\n\n    async onUpload() {\n      /*==============================================================\r\n      **formdata sent file as binary and url search params sent data as object file**\r\n      Creation of form data with the selected file from the input \r\n      (sending this will send the file as a binary object but as part of the multipart/formdata)\r\n      ==============================================================*/\n\n      /*\r\n      const fd = new FormData();\r\n      fd.append('image', this.selectedFile, this.selectedFile.name)\r\n      //Sending the form data as part of Params (it will be sent to the api as an object)\r\n      const data = new URLSearchParams(fd)\r\n      */\n\n      /*==============================================================\r\n      Working version:\r\n      Create a blob from the uploaded image and send as a file\r\n      ==============================================================*/\n      const myBlob = new Blob([this.selectedFile], {\n        type: this.selectedFile.type\n      });\n      const file = new File([myBlob], this.selectedFile.name);\n      const AzureAppFunc = 'https://junecapstonedeploy.azurewebsites.net/api/classify?code=fVWmyxCFxYEsM27JqO14YHau7U7NBL_deO0ZhQ0m3P1gAzFudmTUZQ=='; //post request\n\n      const res = await fetch(AzureAppFunc, {\n        method: 'POST',\n        body: file,\n        redirect: 'follow'\n      }); //Response was in readable stream, so the data has to be formatted to json\n      //A promise will be returned. In order to access the JSON, need await the response\n\n      this.responseData = await res.json();\n      /*\r\n      Condition to retrieve the probability percentage as per the prediction tag name\r\n      Object format:\r\n      {\r\n        created (Date)\r\n        img (Data for base64 conversion)\r\n        predictedTagName (Result from the prediction)\r\n        prediction array (2 tags => 2 rows in array. Each row have 2 columns)\r\n          => probability //e.g. responseData.prediction[1].probability\r\n          => tagName     //e.g. responseData.prediction[1].tagName\r\n      }\r\n      */\n\n      let predictedResult = this.responseData.predictedTagName.toLowerCase();\n      this.responseData.prediction.forEach(prediction => {\n        if (prediction.tagName.toLowerCase() === predictedResult) {\n          this.predictProbability = prediction.probability;\n          return; //End the loop\n        }\n      });\n      /*==============================================================\r\n      This section is to load the uploaded image onto the webpage \r\n      ==============================================================*/\n\n      /*\r\n      this.imgFile = new Image()\r\n      var reader = new FileReader()\r\n      //when the reader is loaded, the imgFile is assigned the reading/event result(image is read onto the web page)\r\n      reader.onload = (e) => {\r\n        this.imgFile = e.target.result\r\n      }\r\n      //Read the uploaded file form the input as URL using the reader.\r\n      reader.readAsDataURL(this.selectedFile) //console log return this as undefined\r\n      */\n\n      /*==============================================================\r\n      This section is to convert the image from Base64 received from API \r\n      to an image on frontend without displaying the uploaded image from \r\n      the direct source\r\n      ==============================================================*/\n\n      this.imgFile = new Image();\n      this.imgFile.src = \"data:image/png;base64,\" + this.responseData.img;\n      this.imgFile.style.width = '100%';\n      /*\r\n      Condition to check if there is any child in the div\r\n      If there is none, appendchild, else replacechild otherwise \r\n      multiple images will appear. \r\n      */\n\n      const element = document.getElementById(\"displayImg\");\n\n      if (element.hasChildNodes()) {\n        element.replaceChild(this.imgFile, element.childNodes[0]);\n      } else {\n        element.appendChild(this.imgFile);\n      }\n\n      console.log(this.responseData); //Returns a proper JSON object\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAwCA;AACA;AACA,OAAOA,OAAP,MAAoB,0BAApB;AAEA,eAAe;AACbC,MAAI,EAAE,WADO;AAEbC,YAAU,EAAE;AACVF;AADU,GAFC;AAKbG,OAAK,EAAE;AACLC,OAAG,EAAEC;AADA,GALM;;AAQbC,MAAG,GAAK;AACN,WAAO;AACLC,kBAAY,EAAE,IADT;AAELC,aAAO,EAAE,IAFJ;AAGLC,kBAAY,EAAE,IAHT;AAILC,wBAAkB,EAAE;AAJf,KAAP;AAMD,GAfY;;AAgBbC,SAAO,EAAE;AACPC,kBAAc,CAACC,KAAD,EAAQ;AACpBC,aAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAKN,YAAL,GAAoBM,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAApB;AACD,KAJM;;AAKP,UAAMC,QAAN,GAAiB;AACf;;;;;;AAIgE;;;;;;;AAQhE;;;;AAIA,YAAMC,MAAK,GAAI,IAAIC,IAAJ,CAAS,CAAC,KAAKb,YAAN,CAAT,EAA8B;AAACc,YAAI,EAAE,KAAKd,YAAL,CAAkBc;AAAzB,OAA9B,CAAf;AACA,YAAMC,IAAG,GAAI,IAAIC,IAAJ,CAAS,CAACJ,MAAD,CAAT,EAAmB,KAAKZ,YAAL,CAAkBN,IAArC,CAAb;AACA,YAAMuB,YAAY,GAAE,yHAApB,CAnBe,CAqBf;;AACA,YAAMC,GAAE,GAAI,MAAMC,KAAI,CAAGF,YAAH,EAAiB;AACrCG,cAAM,EAAE,MAD6B;AAErCC,YAAI,EAAEN,IAF+B;AAGrCO,gBAAQ,EAAE;AAH2B,OAAjB,CAAtB,CAtBe,CA4Bf;AACA;;AACA,WAAKpB,YAAL,GAAoB,MAAMgB,GAAG,CAACK,IAAJ,EAA1B;AAEA;;;;;;;;;;;;;AAYA,UAAIC,eAAc,GAAI,KAAKtB,YAAL,CAAkBuB,gBAAlB,CAAmCC,WAAnC,EAAtB;AACA,WAAKxB,YAAL,CAAkByB,UAAlB,CAA6BC,OAA7B,CAAqCD,UAAS,IAAK;AACjD,YAAIA,UAAU,CAACE,OAAX,CAAmBH,WAAnB,OAAqCF,eAAzC,EACA;AACE,eAAKrB,kBAAL,GAA0BwB,UAAU,CAACG,WAArC;AACA,iBAFF,CAEU;AACV;AACD,OAND;AAQA;;;;AAGA;;;;;;;;;;;AAYA;;;;;;AAKA,WAAK7B,OAAL,GAAe,IAAI8B,KAAJ,EAAf;AACA,WAAK9B,OAAL,CAAa+B,GAAb,GAAmB,2BAA2B,KAAK9B,YAAL,CAAkB+B,GAAhE;AACA,WAAKhC,OAAL,CAAaiC,KAAb,CAAmBC,KAAnB,GAA2B,MAA3B;AAEA;;;;;;AAKA,YAAMC,OAAM,GAAIC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAhB;;AACA,UAAIF,OAAO,CAACG,aAAR,EAAJ,EACA;AACEH,eAAO,CAACI,YAAR,CAAqB,KAAKvC,OAA1B,EAAmCmC,OAAO,CAACK,UAAR,CAAmB,CAAnB,CAAnC;AACF,OAHA,MAIK;AACHL,eAAO,CAACM,WAAR,CAAoB,KAAKzC,OAAzB;AACF;;AAEAM,aAAO,CAACC,GAAR,CAAY,KAAKN,YAAjB,EA3Fe,CA2FgB;AACjC;;AAjGO;AAhBI,CAAf","names":["Results","name","components","props","msg","String","data","selectedFile","imgFile","responseData","predictProbability","methods","onFileSelected","event","console","log","target","files","onUpload","myBlob","Blob","type","file","File","AzureAppFunc","res","fetch","method","body","redirect","json","predictedResult","predictedTagName","toLowerCase","prediction","forEach","tagName","probability","Image","src","img","style","width","element","document","getElementById","hasChildNodes","replaceChild","childNodes","appendChild"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\AIOT_Aquatic_Capstone\\vuefrontend\\src\\components\\Uploads.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n\r\n    <h2>{{ msg }}</h2>\r\n\r\n    <input type=\"file\" @change=\"onFileSelected\" class=\"custom-file-upload\">\r\n    <br/>\r\n\r\n    <button class=\"btn btn-primary font-weight-bold\" @click=\"onUpload\">Upload</button>\r\n\r\n    <div class=\"container\">\r\n      <!--<img :src=\"imgFile\" v-if=\"imgFile\" style=\"max-width: 100%;\" />-->\r\n      <div id=\"displayImg\">\r\n      </div>\r\n\r\n      <div v-if=\"responseData\">\r\n        <div class=\"font-weight-bold\">\r\n          Prediction: {{ responseData.predictedTagName}}\r\n        </div>\r\n        <div class=\"font-weight-bold\"> \r\n          Probability: {{ (this.predictProbability * 100).toFixed(3)}} %\r\n        </div>\r\n      </div>\r\n      <div v-else class=\"font-weight-bold\">\r\n        Please Upload an Image\r\n      </div>\r\n\r\n      \r\n      <!-- import from results later [Scrapped, but file there for future self-reference] -->\r\n      <!--\r\n      <div v-if='this.responseData !==null && this.selectedFile !== null'>\r\n        <Results resData = 'responseData'  selectedImage = 'selectedFile'/> \r\n      </div>\r\n      -->\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//Axios to allow ajax requests inside the script\r\n//import axios from 'axios';\r\nimport Results from '@/components/Results.vue'\r\n\r\nexport default {\r\n  name: 'UploadImg',\r\n  components: {\r\n    Results\r\n  },\r\n  props: {\r\n    msg: String\r\n  },\r\n  data () {\r\n    return {\r\n      selectedFile: null,\r\n      imgFile: null,\r\n      responseData: null,\r\n      predictProbability: 0\r\n    }\r\n  },\r\n  methods: {\r\n    onFileSelected(event) {\r\n      console.log(event)\r\n      this.selectedFile = event.target.files[0]\r\n    },\r\n    async onUpload() {\r\n      /*==============================================================\r\n      **formdata sent file as binary and url search params sent data as object file**\r\n      Creation of form data with the selected file from the input \r\n      (sending this will send the file as a binary object but as part of the multipart/formdata)\r\n      ==============================================================*//*\r\n      const fd = new FormData();\r\n      fd.append('image', this.selectedFile, this.selectedFile.name)\r\n\r\n      //Sending the form data as part of Params (it will be sent to the api as an object)\r\n      const data = new URLSearchParams(fd)\r\n      */\r\n\r\n      /*==============================================================\r\n      Working version:\r\n      Create a blob from the uploaded image and send as a file\r\n      ==============================================================*/\r\n      const myBlob = new Blob([this.selectedFile], {type: this.selectedFile.type})\r\n      const file = new File([myBlob], this.selectedFile.name)\r\n      const AzureAppFunc= 'https://junecapstonedeploy.azurewebsites.net/api/classify?code=fVWmyxCFxYEsM27JqO14YHau7U7NBL_deO0ZhQ0m3P1gAzFudmTUZQ=='\r\n\r\n      //post request\r\n      const res = await fetch (AzureAppFunc, {\r\n        method: 'POST',\r\n        body: file,\r\n        redirect: 'follow'\r\n      })\r\n\r\n      //Response was in readable stream, so the data has to be formatted to json\r\n      //A promise will be returned. In order to access the JSON, need await the response\r\n      this.responseData = await res.json()\r\n\r\n      /*\r\n      Condition to retrieve the probability percentage as per the prediction tag name\r\n      Object format:\r\n      {\r\n        created (Date)\r\n        img (Data for base64 conversion)\r\n        predictedTagName (Result from the prediction)\r\n        prediction array (2 tags => 2 rows in array. Each row have 2 columns)\r\n          => probability //e.g. responseData.prediction[1].probability\r\n          => tagName     //e.g. responseData.prediction[1].tagName\r\n      }\r\n      */\r\n      let predictedResult = this.responseData.predictedTagName.toLowerCase();\r\n      this.responseData.prediction.forEach(prediction => {\r\n        if (prediction.tagName.toLowerCase() === predictedResult)\r\n        {\r\n          this.predictProbability = prediction.probability;\r\n          return; //End the loop\r\n        }\r\n      })\r\n    \r\n      /*==============================================================\r\n      This section is to load the uploaded image onto the webpage \r\n      ==============================================================*/\r\n      /*\r\n      this.imgFile = new Image()\r\n      var reader = new FileReader()\r\n      //when the reader is loaded, the imgFile is assigned the reading/event result(image is read onto the web page)\r\n      reader.onload = (e) => {\r\n        this.imgFile = e.target.result\r\n      }\r\n      //Read the uploaded file form the input as URL using the reader.\r\n      reader.readAsDataURL(this.selectedFile) //console log return this as undefined\r\n      */\r\n\r\n\r\n      /*==============================================================\r\n      This section is to convert the image from Base64 received from API \r\n      to an image on frontend without displaying the uploaded image from \r\n      the direct source\r\n      ==============================================================*/\r\n      this.imgFile = new Image()\r\n      this.imgFile.src = \"data:image/png;base64,\" + this.responseData.img\r\n      this.imgFile.style.width = '100%'\r\n\r\n      /*\r\n      Condition to check if there is any child in the div\r\n      If there is none, appendchild, else replacechild otherwise \r\n      multiple images will appear. \r\n      */\r\n      const element = document.getElementById(\"displayImg\")\r\n      if (element.hasChildNodes())\r\n      {\r\n        element.replaceChild(this.imgFile, element.childNodes[0])\r\n      }\r\n      else {\r\n        element.appendChild(this.imgFile)\r\n      }\r\n      \r\n      console.log(this.responseData) //Returns a proper JSON object\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n\r\n.container {\r\n  max-width: 500px;\r\n  margin: 30px auto;\r\n  overflow: auto;\r\n  min-height: 300px;\r\n  border: 1px solid steelblue;\r\n  padding: 30px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.custom-file-upload {\r\n    border: 1px solid steelblue;\r\n    display: inline-block;\r\n    padding: 15px 10%; /* vertical horizontal */\r\n    margin: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}