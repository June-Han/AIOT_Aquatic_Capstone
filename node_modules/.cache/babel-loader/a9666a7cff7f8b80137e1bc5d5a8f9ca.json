{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-533968dc\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"hello\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = {\n  class: \"container\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"displayImg\"\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  class: \"font-weight-bold\"\n};\nconst _hoisted_7 = {\n  class: \"font-weight-bold\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"font-weight-bold\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, _toDisplayString($props.msg), 1\n  /* TEXT */\n  ), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.onFileSelected && $options.onFileSelected(...args)),\n    class: \"custom-file-upload\"\n  }, null, 32\n  /* HYDRATE_EVENTS */\n  ), _hoisted_2, _createElementVNode(\"button\", {\n    class: \"btn btn-primary font-weight-bold\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.onUpload && $options.onUpload(...args))\n  }, \"Upload\"), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\"<img :src=\\\"imgFile\\\" v-if=\\\"imgFile\\\" style=\\\"max-width: 100%;\\\" />\"), _hoisted_4, $data.responseData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, \" Prediction: \" + _toDisplayString($data.responseData.predictedTagName), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", _hoisted_7, \" Probability: \" + _toDisplayString((this.predictProbability * 100).toFixed(3)) + \" % \", 1\n  /* TEXT */\n  )])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, \" Please Upload an Image \")), _createCommentVNode(\" import from results later [Scrapped, but file there for future self-reference] \"), _createCommentVNode(\"\\r\\n      <div v-if='this.responseData !==null && this.selectedFile !== null'>\\r\\n        <Results resData = 'responseData'  selectedImage = 'selectedFile'/> \\r\\n      </div>\\r\\n      \")])]);\n}","map":{"version":3,"mappings":";;;;;AACOA,OAAK,EAAC;;;gEAKTC,oBAAK,IAAL,EAAK,IAAL,EAAK,IAAL,EAAK;AAAA;AAAL;;;AAIKD,OAAK,EAAC;;;gEAETC,oBACM,KADN,EACM;AADDC,IAAE,EAAC;AACF,CADN,EAAoB,IAApB,EAAoB;AAAA;AAApB;;;;;;AAIOF,OAAK,EAAC;;;AAGNA,OAAK,EAAC;;;;AAIDA,OAAK,EAAC;;;uBAtBtBG,oBAmCM,KAnCN,cAmCM,CAjCJF,oBAAkB,IAAlB,EAAkB,IAAlB,EAAkBG,iBAAXC,UAAW,CAAlB,EAAU;AAAA;AAAV,GAiCI,EA/BJJ,oBAAuE,OAAvE,EAAuE;AAAhEK,QAAI,EAAC,MAA2D;AAAnDC,YAAM,yCAAEC,2DAAF,CAA6C;AAA3BR,SAAK,EAAC;AAAqB,GAAvE;;AAAA,GA+BI,EA9BJS,UA8BI,EA5BJR,oBAAkF,QAAlF,EAAkF;AAA1ED,SAAK,EAAC,kCAAoE;AAAhCU,WAAK,yCAAEF,+CAAF;AAA2B,GAAlF,EAAmE,QAAnE,CA4BI,EA1BJP,oBAwBM,KAxBN,cAwBM,CAvBJU,2FAuBI,EAtBJC,UAsBI,EAnBOC,oCAAXV,oBAOM,KAPN,EAOMW,UAPN,EAOM,CANJb,oBAEM,KAFN,cAA8B,kBAChBG,iBAAGS,mBAAaE,gBAAhB,CADd,EAC8C;AAAA;AAD9C,GAMI,EAHJd,oBAEM,KAFN,cAA8B,mBACfG,uBAASY,kBAAT,GAA2B,GAA3B,EAAmCC,OAAnC,CAA0C,CAA1C,EADe,GACgC,KAD9D,EAEA;AAAA;AAFA,GAGI,CAPN,oBAQAd,oBAEM,KAFN,cAAqC,0BAArC,EAWI,EANJQ,uGAMI,EALJA,+MAKI,CAxBN,CA0BI,CAnCN","names":["class","_createElementVNode","id","_createElementBlock","_toDisplayString","$props","type","onChange","$options","_hoisted_2","onClick","_createCommentVNode","_hoisted_4","$data","_hoisted_5","predictedTagName","predictProbability","toFixed"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\AIOT_Aquatic_Capstone\\vuefrontend\\src\\components\\Uploads.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n\r\n    <h2>{{ msg }}</h2>\r\n\r\n    <input type=\"file\" @change=\"onFileSelected\" class=\"custom-file-upload\">\r\n    <br/>\r\n\r\n    <button class=\"btn btn-primary font-weight-bold\" @click=\"onUpload\">Upload</button>\r\n\r\n    <div class=\"container\">\r\n      <!--<img :src=\"imgFile\" v-if=\"imgFile\" style=\"max-width: 100%;\" />-->\r\n      <div id=\"displayImg\">\r\n      </div>\r\n\r\n      <div v-if=\"responseData\">\r\n        <div class=\"font-weight-bold\">\r\n          Prediction: {{ responseData.predictedTagName}}\r\n        </div>\r\n        <div class=\"font-weight-bold\"> \r\n          Probability: {{ (this.predictProbability * 100).toFixed(3)}} %\r\n        </div>\r\n      </div>\r\n      <div v-else class=\"font-weight-bold\">\r\n        Please Upload an Image\r\n      </div>\r\n\r\n      \r\n      <!-- import from results later [Scrapped, but file there for future self-reference] -->\r\n      <!--\r\n      <div v-if='this.responseData !==null && this.selectedFile !== null'>\r\n        <Results resData = 'responseData'  selectedImage = 'selectedFile'/> \r\n      </div>\r\n      -->\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//Axios to allow ajax requests inside the script\r\n//import axios from 'axios';\r\nimport Results from '@/components/Results.vue'\r\n\r\nexport default {\r\n  name: 'UploadImg',\r\n  components: {\r\n    Results\r\n  },\r\n  props: {\r\n    msg: String\r\n  },\r\n  data () {\r\n    return {\r\n      selectedFile: null,\r\n      imgFile: null,\r\n      responseData: null,\r\n      predictProbability: 0\r\n    }\r\n  },\r\n  methods: {\r\n    onFileSelected(event) {\r\n      console.log(event)\r\n      this.selectedFile = event.target.files[0]\r\n    },\r\n    async onUpload() {\r\n      /*==============================================================\r\n      **formdata sent file as binary and url search params sent data as object file**\r\n      Creation of form data with the selected file from the input \r\n      (sending this will send the file as a binary object but as part of the multipart/formdata)\r\n      ==============================================================*//*\r\n      const fd = new FormData();\r\n      fd.append('image', this.selectedFile, this.selectedFile.name)\r\n\r\n      //Sending the form data as part of Params (it will be sent to the api as an object)\r\n      const data = new URLSearchParams(fd)\r\n      */\r\n\r\n      /*==============================================================\r\n      Working version:\r\n      Create a blob from the uploaded image and send as a file\r\n      ==============================================================*/\r\n      const myBlob = new Blob([this.selectedFile], {type: this.selectedFile.type})\r\n      const file = new File([myBlob], this.selectedFile.name)\r\n      const AzureAppFunc= 'https://junecapstonedeploy.azurewebsites.net/api/classify?code=fVWmyxCFxYEsM27JqO14YHau7U7NBL_deO0ZhQ0m3P1gAzFudmTUZQ=='\r\n\r\n      //post request\r\n      const res = await fetch (AzureAppFunc, {\r\n        method: 'POST',\r\n        body: file,\r\n        redirect: 'follow'\r\n      })\r\n\r\n      //Response was in readable stream, so the data has to be formatted to json\r\n      //A promise will be returned. In order to access the JSON, need await the response\r\n      this.responseData = await res.json()\r\n\r\n      /*\r\n      Condition to retrieve the probability percentage as per the prediction tag name\r\n      Object format:\r\n      {\r\n        created (Date)\r\n        img (Data for base64 conversion)\r\n        predictedTagName (Result from the prediction)\r\n        prediction array (2 tags => 2 rows in array. Each row have 2 columns)\r\n          => probability //e.g. responseData.prediction[1].probability\r\n          => tagName     //e.g. responseData.prediction[1].tagName\r\n      }\r\n      */\r\n      let predictedResult = this.responseData.predictedTagName.toLowerCase();\r\n      this.responseData.prediction.forEach(prediction => {\r\n        if (prediction.tagName.toLowerCase() === predictedResult)\r\n        {\r\n          this.predictProbability = prediction.probability;\r\n          return; //End the loop\r\n        }\r\n      })\r\n    \r\n      /*==============================================================\r\n      This section is to load the uploaded image onto the webpage \r\n      ==============================================================*/\r\n      /*\r\n      this.imgFile = new Image()\r\n      var reader = new FileReader()\r\n      //when the reader is loaded, the imgFile is assigned the reading/event result(image is read onto the web page)\r\n      reader.onload = (e) => {\r\n        this.imgFile = e.target.result\r\n      }\r\n      //Read the uploaded file form the input as URL using the reader.\r\n      reader.readAsDataURL(this.selectedFile) //console log return this as undefined\r\n      */\r\n\r\n\r\n      /*==============================================================\r\n      This section is to convert the image from Base64 received from API \r\n      to an image on frontend without displaying the uploaded image from \r\n      the direct source\r\n      ==============================================================*/\r\n      this.imgFile = new Image()\r\n      this.imgFile.src = \"data:image/png;base64,\" + this.responseData.img\r\n      this.imgFile.style.width = '100%'\r\n\r\n      /*\r\n      Condition to check if there is any child in the div\r\n      If there is none, appendchild, else replacechild otherwise \r\n      multiple images will appear. \r\n      */\r\n      const element = document.getElementById(\"displayImg\")\r\n      if (element.hasChildNodes())\r\n      {\r\n        element.replaceChild(this.imgFile, element.childNodes[0])\r\n      }\r\n      else {\r\n        element.appendChild(this.imgFile)\r\n      }\r\n      \r\n      console.log(this.responseData) //Returns a proper JSON object\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n\r\n.container {\r\n  max-width: 500px;\r\n  margin: 30px auto;\r\n  overflow: auto;\r\n  min-height: 300px;\r\n  border: 1px solid steelblue;\r\n  padding: 30px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.custom-file-upload {\r\n    border: 1px solid steelblue;\r\n    display: inline-block;\r\n    padding: 15px 10%; /* vertical horizontal */\r\n    margin: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}